// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  active
  inactive
  archived
}

model CloudImage {
  id       String @id @default(uuid())
  publicId String
  name     String

  fullUrl   String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  blog   Blog?   @relation(fields: [blogId], references: [id])
  blogId String?
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  content     String
  publishedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  status Status       @default(active)
  images CloudImage[]

  @@map("blogs")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  stock       Int
  content     String
  availableAt DateTime
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  status Status
  images CloudImage[]

  @@map("products")
}

enum Theme {
  light
  dark
  system
}

model User {
  id       String @id @default(uuid())
  username String
  email    String @unique
  password String

  theme Theme

  PasswordResetToken PasswordResetToken[]
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ForgotPasswordRequest {
  id        String   @id @default(uuid())
  email     String
  createdAt DateTime @default(now())
}
