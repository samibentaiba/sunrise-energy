import pkg from 'pg';
const { Client } = pkg;

import inquirer from 'inquirer';
import fs from 'fs';
import path from 'path';

// Default Database configuration
let DB_NAME = 'mydashboard';
let DB_USER = 'postgres';
let DB_PASSWORD = '123456';
let DB_HOST = 'localhost';
let DB_PORT = 5432;

// Function to update the .env file with the new database URL
async function updateEnvFile() {
  const envPath = path.resolve(__dirname, '../.env');
  const postgresUrl = `DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable"`;

  try {
    if (fs.existsSync(envPath)) {
      let envContent = fs.readFileSync(envPath, 'utf-8');
      
      // If DATABASE_URL exists, replace it with the new one
      const regex = /DATABASE_URL="postgresql:\/\/.*\/.*\?sslmode=disable"/;
      if (regex.test(envContent)) {
        envContent = envContent.replace(regex, postgresUrl);
        console.log('Updated DATABASE_URL in .env file.');
      } else {
        console.log('DATABASE_URL not found in .env file. Adding the new URL.');
        envContent += `\n${postgresUrl}\n`;
      }

      // Write the updated content to the .env file
      fs.writeFileSync(envPath, envContent);
    } else {
      // Create the .env file if it doesn't exist
      const envContent = `
# .env file generated by CreateDb to make your life easier
# https://vercel.com/docs/storage/vercel-postgres
DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable"
# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema
REACT_EDITOR=atom
# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings
AUTH_RESEND_KEY=
NEXT_PUBLIC_BASE_URL=http://localhost:3000
NEXTAUTH_URL=http://localhost:3000
NEXTJS_ENABLE_REACT_HYDRATION_DEBUG=true

# https://generate-secret.vercel.app/32
AUTH_SECRET= 
# https://authjs.dev/getting-started/providers/github
# https://github.com/settings/applications/new
AUTH_GITHUB_ID= 
AUTH_GITHUB_SECRET=

      `;
      fs.writeFileSync(envPath, envContent);
      console.log('.env file created successfully!');
    }
  } catch (err) {
    console.error('Error updating .env file:', err);
  }
}

// Function to update database configuration interactively
async function updateDatabaseConfig() {
  const answers = await inquirer.prompt([
    {
      type: 'input',
      name: 'db_name',
      message: 'Enter the database name (leave blank to keep the current value):',
      default: DB_NAME,
    },
    {
      type: 'input',
      name: 'db_user',
      message: 'Enter the database user (leave blank to keep the current value):',
      default: DB_USER,
    },
    {
      type: 'password',
      name: 'db_password',
      message: 'Enter the database password (leave blank to keep the current value):',
      default: DB_PASSWORD,
    },
    {
      type: 'input',
      name: 'db_host',
      message: 'Enter the database host (leave blank to keep the current value):',
      default: DB_HOST,
    },
    {
      type: 'number',
      name: 'db_port',
      message: 'Enter the database port (leave blank to keep the current value):',
      default: DB_PORT,
    },
  ]);

  DB_NAME = answers.db_name || DB_NAME;
  DB_USER = answers.db_user || DB_USER;
  DB_PASSWORD = answers.db_password || DB_PASSWORD;
  DB_HOST = answers.db_host || DB_HOST;
  DB_PORT = answers.db_port || DB_PORT;

  console.log('Database configuration updated successfully!');
}

// Create Database
async function createDatabase() {
  const client = new Client({
    host: DB_HOST,
    port: DB_PORT,
    user: DB_USER,
    password: DB_PASSWORD,
    database: 'postgres' // Connect to the default database to create a new one
  });

  try {
    await client.connect();
    const res = await client.query(
      `SELECT 1 FROM pg_database WHERE datname = $1`,
      [DB_NAME]
    );

    if (res.rows.length > 0) {
      console.log(`Database '${DB_NAME}' already exists!`);
    } else {
      await client.query(`CREATE DATABASE ${DB_NAME}`);
      console.log(`Database '${DB_NAME}' created successfully!`);
    }
  } catch (err) {
    console.error('Error creating database:', err);
  } finally {
    await client.end();
  }
}

// Delete Database
async function deleteDatabase() {
  const client = new Client({
    host: DB_HOST,
    port: DB_PORT,
    user: DB_USER,
    password: DB_PASSWORD,
    database: 'postgres' // Connect to the default database to delete another one
  });

  try {
    await client.connect();
    const res = await client.query(
      `SELECT 1 FROM pg_database WHERE datname = $1`,
      [DB_NAME]
    );

    if (res.rows.length === 0) {
      console.log(`Database '${DB_NAME}' does not exist!`);
    } else {
      await client.query(`DROP DATABASE ${DB_NAME}`);
      console.log(`Database '${DB_NAME}' deleted successfully!`);
    }
  } catch (err) {
    console.error('Error deleting database:', err);
  } finally {
    await client.end();
  }
}

// Recreate Database (delete and then create)
async function recreateDatabase() {
  await deleteDatabase();
  await createDatabase();
}

// Prompt the user to choose an action
async function promptAction() {
  const answer = await inquirer.prompt([
    {
      type: 'list',
      name: 'action',
      message: 'What would you like to do?',
      choices: ['Create Database', 'Delete Database', 'Recreate Database', 'Update DB Configuration', 'Exit'],
    },
  ]);

  switch (answer.action) {
    case 'Create Database':
      await createDatabase();
      await updateEnvFile();  // Update the .env file after creating the DB
      break;
    case 'Delete Database':
      await deleteDatabase();
      break;
    case 'Recreate Database':
      await recreateDatabase();
      await updateEnvFile();  // Update the .env file after recreating the DB
      break;
    case 'Update DB Configuration':
      await updateDatabaseConfig();
      break;
    case 'Exit':
      console.log('Exiting the program...');
      return;
    default:
      console.log('Invalid option!');
  }

  // After performing the action, ask again unless it's "Exit"
  if (answer.action !== 'Exit') {
    await promptAction();
  }
}

// Start the script by prompting the user
promptAction();
